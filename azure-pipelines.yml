trigger:
  branches:
    include:
    - master
    - develop
    - documentation

variables:
- group: piral-deployment-variables
- name: previewId
  value: $(Build.BuildId)
- name: agentName
  value: 'ubuntu-latest'
- name: releaseBranch
  value: 'master'
- name: previewBranch
  value: 'develop'
- name: documentBranch
  value: 'documentation'
- name: nodeVersion
  value: '12.16.3'

stages:
- stage: Build
  displayName: Process Code

  jobs:
  - job: BuildCode
    displayName: Verify and Build Code
    pool:
      vmImage: $(agentName)
    steps:
    - task: NodeTool@0
      displayName: Use Node $(nodeVersion)
      inputs:
        versionSpec: $(nodeVersion)
    - task: YarnInstaller@2
      displayName: Install Yarn
      inputs:
        checkLatest: true
    - task: Yarn@2
      displayName: Install Dependencies
      inputs:
        Arguments: install
    - task: Yarn@2
      displayName: Assemble Packages
      inputs:
        Arguments: setup
    - task: Yarn@2
      displayName: Build Core Demo
      inputs:
        Arguments: build:demo-core
    - task: Yarn@2
      displayName: Build CrossFx Demo
      inputs:
        Arguments: build:demo-cross
    - task: Yarn@2
      displayName: Build Full Demo
      inputs:
        Arguments: build:demo-full
    - task: Yarn@2
      displayName: Build Landing Page
      inputs:
        Arguments: build:page
    - task: Yarn@2
      displayName: Build Documentation
      inputs:
        Arguments: ci:docs
    - task: Yarn@2
      displayName: Test Code
      inputs:
        Arguments: test
    - publish: $(System.DefaultWorkingDirectory)/dist
      artifact: 'dist'

- stage: Release
  displayName: Release Packages
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], variables['releaseBranch']), eq(variables['Build.SourceBranchName'], variables['previewBranch'])))

  jobs:
  - deployment: PreReleasePackages
    displayName: PreRelease Piral Packages
    condition: eq(variables['Build.SourceBranchName'], variables['previewBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Configure Git
            inputs:
              targetType: inline
              script: >-
                git config --global user.email "releases@piral.io"

                git config --global user.name "Piral Release Bot"

                git checkout $(previewBranch)

                git checkout -- .
          - task: Yarn@2
            displayName: Prerelease Packages
            inputs:
              Arguments: ci:prerelease
              customEndpoint: DefaultNpmConnection

  - deployment: ReleasePackages
    displayName: Release Piral Packages
    condition: eq(variables['Build.SourceBranchName'], variables['releaseBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Configure Git
            inputs:
              targetType: inline
              script: >-
                git config --global user.email "releases@piral.io"

                git config --global user.name "Piral Release Bot"

                git remote rm origin

                git remote add origin https://$(githubPersonalAccessToken)@github.com/smapiot/piral.git

                git fetch origin

                git checkout $(releaseBranch)

                git checkout -- .
          - task: Yarn@2
            displayName: Update Release Date
            inputs:
              Arguments: ci:version-update
              customEndpoint: DefaultNpmConnection
          - task: Yarn@2
            displayName: Release Packages
            inputs:
              Arguments: ci:release
              customEndpoint: DefaultNpmConnection

  - deployment: PreReleaseDemoCross
    displayName: PreRelease Demo CrossFx Package
    condition: eq(variables['Build.SourceBranchName'], variables['previewBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Build CrossFx Emulator
            inputs:
              targetType: inline
              script: >-
                ORIGVER=`yarn --silent ci:version`

                VERSION="$ORIGVER-pre.$(previewId)"

                sed -i -e "s/\(\"version\":\\s\+\"\)\([0-9]\+\.\?\)\+/\1$VERSION/" src/samples/sample-cross-fx/package.json

                yarn build:demo-cross --type emulator

                mv dist/demo-cross/emulator/*.tgz dist/demo-cross/emulator/sample-cross-fx.tgz
          - task: Npm@1
            displayName: Release Packages
            inputs:
              command: custom
              customCommand: publish dist/demo-cross/emulator/sample-cross-fx.tgz --tag next
              customEndpoint: DefaultNpmConnection

  - deployment: ReleaseDemoCross
    displayName: Release Demo CrossFx Package
    condition: eq(variables['Build.SourceBranchName'], variables['releaseBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Yarn@2
            displayName: Update Version
            inputs:
              Arguments: ci:version --update
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Build CrossFx Emulator
            inputs:
              targetType: inline
              script: >-
                yarn build:demo-cross --type emulator

                mv dist/demo-cross/emulator/*.tgz dist/demo-cross/emulator/sample-cross-fx.tgz
          - task: Npm@1
            displayName: Release Packages
            inputs:
              command: custom
              customCommand: publish dist/demo-cross/emulator/sample-cross-fx.tgz --tag latest
              customEndpoint: DefaultNpmConnection

  - deployment: PreReleaseDemoFull
    displayName: PreRelease Demo Full Package
    condition: eq(variables['Build.SourceBranchName'], variables['previewBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Build Full Emulator
            inputs:
              targetType: inline
              script: >-
                ORIGVER=`yarn --silent ci:version`

                VERSION="$ORIGVER-pre.$(previewId)"

                sed -i -e "s/\(\"version\":\\s\+\"\)\([0-9]\+\.\?\)\+/\1$VERSION/" src/samples/sample-piral/package.json

                yarn build:demo-full --type emulator

                mv dist/demo-full/emulator/*.tgz dist/demo-full/emulator/sample-full.tgz
          - task: Npm@1
            displayName: Release Packages
            inputs:
              command: custom
              customCommand: publish dist/demo-full/emulator/sample-full.tgz
              customEndpoint: DefaultNpmConnection

  - deployment: ReleaseDemoFull
    displayName: Release Demo Full Package
    condition: eq(variables['Build.SourceBranchName'], variables['releaseBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Yarn@2
            displayName: Update Version
            inputs:
              Arguments: ci:version --update
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Build Full Emulator
            inputs:
              targetType: inline
              script: >-
                yarn build:demo-full --type emulator

                mv dist/demo-full/emulator/*.tgz dist/demo-full/emulator/sample-full.tgz
          - task: Npm@1
            displayName: Release Packages
            inputs:
              command: custom
              customCommand: publish dist/demo-full/emulator/sample-full.tgz --tag latest
              customEndpoint: DefaultNpmConnection

  - deployment: PreReleaseSiteless
    displayName: PreRelease Siteless Package
    condition: eq(variables['Build.SourceBranchName'], variables['previewBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Build Siteless
            inputs:
              targetType: inline
              script: >-
                ORIGVER=`yarn --silent ci:version`

                VERSION="$ORIGVER-pre.$(previewId)"

                sed -i -e "s/\(\"version\":\\s\+\"\)\([0-9]\+\.\?\)\+/\1$VERSION/" src/framework/siteless/package.json

                yarn build:siteless

                mv dist/siteless/emulator/*.tgz dist/siteless/emulator/siteless.tgz
          - task: Npm@1
            displayName: Release Packages
            inputs:
              command: custom
              customCommand: publish dist/siteless/emulator/siteless.tgz --tag next
              customEndpoint: DefaultNpmConnection

  - deployment: ReleaseSiteless
    displayName: Release Siteless Package
    condition: eq(variables['Build.SourceBranchName'], variables['releaseBranch'])
    pool:
      vmImage: $(agentName)
    environment: 'registry-npmjs-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: NodeTool@0
            displayName: Use Node $(nodeVersion)
            inputs:
              versionSpec: $(nodeVersion)
          - task: YarnInstaller@2
            displayName: Install Yarn
            inputs:
              checkLatest: true
          - task: Yarn@2
            displayName: Install Dependencies
            inputs:
              Arguments: install
          - task: Yarn@2
            displayName: Assemble Packages
            inputs:
              Arguments: setup
          - task: npmAuthenticate@0
            inputs:
              workingFile: .npmrc
              customEndpoint: DefaultNpmConnection
          - task: Yarn@2
            displayName: Update Version
            inputs:
              Arguments: ci:version --update
              customEndpoint: DefaultNpmConnection
          - task: Bash@3
            displayName: Build Siteless
            inputs:
              targetType: inline
              script: >-
                yarn build:siteless

                mv dist/siteless/emulator/*.tgz dist/siteless/emulator/siteless.tgz
          - task: Npm@1
            displayName: Release Packages
            inputs:
              command: custom
              customCommand: publish dist/siteless/emulator/siteless.tgz --tag latest
              customEndpoint: DefaultNpmConnection

- stage: DeployPages
  displayName: Deploy Pages
  dependsOn: Build
  condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], variables['releaseBranch']), eq(variables['Build.SourceBranchName'], variables['documentBranch'])))

  jobs:
  - deployment: DeployLandingPage
    displayName: Deploy Piral Landing Page
    pool:
      vmImage: $(agentName)
    environment: 'www-piral-io'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'dist'
              path: $(System.DefaultWorkingDirectory)/dist
          - task: sftpupload@1
            displayName: Upload Landing Page
            inputs:
              sourceFolder: 'dist/www/release'
              contents: '**'
              targetFolder: '/www/'
              host: $(ftpHostname)
              overwrite: true
              port: '22'
              username: $(ftpUsername)
              password: $(ftpPassword)

  - deployment: DeployDocumentationPage
    displayName: Deploy Piral Documentation Page
    pool:
      vmImage: $(agentName)
    environment: 'docs-piral-io'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'dist'
              path: $(System.DefaultWorkingDirectory)/dist
          - task: sftpupload@1
            displayName: Upload Documentation Page
            inputs:
              sourceFolder: 'dist/docs/release'
              contents: '**'
              targetFolder: '/docs/'
              host: $(ftpHostname)
              overwrite: true
              port: '22'
              username: $(ftpUsername)
              password: $(ftpPassword)

- stage: DeployDemos
  displayName: Deploy Demos
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['releaseBranch']))

  jobs:
  - deployment: DeployCoreDemo
    displayName: Deploy Piral Core Demo
    pool:
      vmImage: $(agentName)
    environment: 'demo-core-piral-io'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'dist'
              path: $(System.DefaultWorkingDirectory)/dist
          - task: sftpupload@1
            displayName: Upload Core Demo
            inputs:
              sourceFolder: 'dist/demo-core/release'
              contents: '**'
              targetFolder: '/demo-core/'
              host: $(ftpHostname)
              overwrite: true
              port: '22'
              username: $(ftpUsername)
              password: $(ftpPassword)

  - deployment: DeployCrossDemo
    displayName: Deploy Piral Cross Demo
    pool:
      vmImage: $(agentName)
    environment: 'demo-cross-piral-io'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'dist'
              path: $(System.DefaultWorkingDirectory)/dist
          - task: sftpupload@1
            displayName: Upload CrossFx Demo
            inputs:
              sourceFolder: 'dist/demo-cross/release'
              contents: '**'
              targetFolder: '/demo-cross/'
              host: $(ftpHostname)
              overwrite: true
              port: '22'
              username: $(ftpUsername)
              password: $(ftpPassword)

  - deployment: DeployFullDemo
    displayName: Deploy Piral Full Demo
    pool:
      vmImage: $(agentName)
    environment: 'demo-full-piral-io'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'dist'
              path: $(System.DefaultWorkingDirectory)/dist
          - task: sftpupload@1
            displayName: Upload Core Demo
            inputs:
              sourceFolder: 'dist/demo-full/release'
              contents: '**'
              targetFolder: '/demo-full/'
              host: $(ftpHostname)
              overwrite: true
              port: '22'
              username: $(ftpUsername)
              password: $(ftpPassword)

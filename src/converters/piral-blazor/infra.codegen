const axios = require('axios');
const yauzl = require('yauzl');
const fs = require('fs');
const path = require('path');

const prefix = 'staticwebassets/';

function readSourceFromBuffer(buffer, outDir) {
  return new Promise((resolve, reject) => {
    yauzl.fromBuffer(buffer, { lazyEntries: true }, (err, zip) => {
      if (err) {
        reject(err);
      } else {
        zip.on('entry', entry => {
          const file = entry.fileName;
          const dir = path.dirname(file);

          if (dir.startsWith(prefix)) {
            const target = path.resolve(outDir, file.substring(prefix.length));
            zip.openReadStream(entry, (err, rs) => {
              if (err) {
                reject(err);
              } else {
                const ws = fs.createWriteStream(target);
                rs.on('end', () => {
                  ws.close();
                  zip.readEntry();
                });
                rs.pipe(ws);
              }
            });
          } else {
            zip.readEntry();
          }
        });
        zip.on('end', resolve);
        zip.readEntry();
      }
    });
  });
}

function generateModule(blazorBootFile) {
  return new Promise(resolve => {
    setTimeout(() => {
      const content = fs.readFileSync(blazorBootFile, 'utf8');
      resolve(`module.exports = ${content};`);
    }, 100);
  });
}

module.exports = function() {
  const version = process.env.PIRAL_BLAZOR_VERSION || '';
  const localFile = process.env.PIRAL_BLAZOR_LOCAL_NUPKG;
  const outDir = this.options.outDir;
  const frameworkDir = path.resolve(outDir, '_framework');
  const binDir = path.resolve(frameworkDir, '_bin');
  const wasmDir = path.resolve(frameworkDir, 'wasm');
  const blazorBootFile = path.resolve(frameworkDir, 'blazor.boot.json');

  !fs.existsSync(outDir) && fs.mkdirSync(outDir, { recursive: true });
  !fs.existsSync(frameworkDir) && fs.mkdirSync(frameworkDir);
  !fs.existsSync(binDir) && fs.mkdirSync(binDir);
  !fs.existsSync(wasmDir) && fs.mkdirSync(wasmDir);

  if (localFile && fs.existsSync(localFile)) {
    const content = fs.readFileSync(localFile);

    return readSourceFromBuffer(content, outDir)
      .then(() => generateModule(blazorBootFile));
  }

  return axios
    .get(`https://www.nuget.org/api/v2/package/Piral.Blazor.Core/${version}`, { responseType: 'arraybuffer' })
    .then(res => readSourceFromBuffer(res.data, outDir))
    .then(() => generateModule(blazorBootFile));
};

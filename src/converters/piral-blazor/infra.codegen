const fs = require('fs');
const { join, basename, dirname, resolve } = require('path');

function copyFileSync(source, target) {
  let targetFile = target;

  // If target is a directory, a new file with the same name will be created
  if (fs.existsSync(target) && fs.lstatSync(target).isDirectory()) {
    targetFile = join(target, basename(source));
  }

  fs.writeFileSync(targetFile, fs.readFileSync(source));
}

function copyFolderRecursiveSync(source, target) {
  let files = [];

  // Check if folder needs to be created or integrated
  const targetFolder = join(target, basename(source));

  if (!fs.existsSync(targetFolder)) {
    fs.mkdirSync(targetFolder);
  }

  // Copy
  if (fs.lstatSync(source).isDirectory()) {
    files = fs.readdirSync(source);
    files.forEach((file) => {
      const curSource = join(source, file);

      if (fs.lstatSync(curSource).isDirectory()) {
        copyFolderRecursiveSync(curSource, targetFolder);
      } else {
        copyFileSync(curSource, targetFolder);
      }
    });
  }
}

module.exports = function () {
  const outDir = this.options.outDir;

  !fs.existsSync(outDir) && fs.mkdirSync(outDir, { recursive: true });

  try {
    const blazorPackagePath = require.resolve('blazor/package.json');
    const releaseType = process.env.NODE_ENV === 'production' ? 'release' : 'debug';
    const blazorBaseDir = resolve(dirname(blazorPackagePath), releaseType);
    const frameworkDir = resolve(blazorBaseDir, 'wwwroot', '_framework');

    copyFolderRecursiveSync(frameworkDir, outDir);

    return `module.exports = ${JSON.stringify('_framework/blazor.webassembly.js')};`;
  } catch (err) {
    throw new Error(`The "blazor" package was not found. Make sure to install it via "npm i blazor". ${err}`);
  }
};

const { getTutorials, getName, generateFile, generated, generatedName } = require('./paths');
const { render } = require('./markdown');
const { docRef } = require('./utils');

function getRoute(name) {
  return (name && `/guidelines/tutorials/${name}`) || '';
}

module.exports = function() {
  const files = getTutorials();

  const imports = files
    .map((file, i) => {
      const name = getName(file);
      const previous = getName(files[i - 1]);
      const next = getName(files[i + 1]);
      const { mdValue, meta = {} } = render(file, generated);
      this.addDependency(file, { includedInParent: true });
      generateFile(
        `tutorial-${name}`,
        `
import * as React from 'react';
import { Tutorial, Markdown } from '../../scripts/components';
export default () => (
  <Tutorial
    previous="${getRoute(previous)}"
    next="${getRoute(next)}"
    meta={${JSON.stringify(meta)}}>
    <Markdown content={${mdValue}} link="${docRef(file)}" />
  </Tutorial>
);`,
        'jsx',
      );
      return `
      {
        id: '${name}',
        route: '${getRoute(name)}',
        section: '${meta.section || ''}',
        page: lazy(() => import('./${generatedName}/tutorial-${name}')),
      }`;
    });

  return `
    const { lazy } = require('react');
    module.exports = [${imports.join(', ')}];
  `;
};

const { readFileSync, writeFileSync, existsSync } = require('fs');
const { resolve } = require('path');

const fileName = 'sw.js';

function readDefaultSync() {
  return readFileSync(resolve(__dirname, fileName), 'utf8');
}

function fillTemplate(content, values) {
  Object.keys(values).forEach(key => {
    const value = JSON.stringify(values[key]);
    content = content.split(key).join(value);
  });

  return content;
}

module.exports = function() {
  const target = resolve(this.options.outDir, fileName);
  const source = resolve(this.options.rootDir, fileName);
  const template = existsSync(source) ? readFileSync(source, 'utf8') : readDefaultSync();

  //TODO need to load assets, maybe load on bundle-end?
  const content = fillTemplate(template, {
    __DEBUG__: process.env.NODE_ENV !== 'production',
    __PARAMS__: {
      responseStrategy: 'cache-first',
      strategy: 'changed',
      hashesMap: {},
      externals: [],
      prefetchRequest: undefined,
      name: process.env.BUILD_PCKG_NAME,
      version: process.env.BUILD_PCKG_VERSION,
      assets: {
        main: [],
        additional: [],
        optional: [],
      },
    },
    __HELPERS__: {
      cacheMaps: [
        {
          sameHost: true,
          exclusions: ['/robots.txt'],
          fallback: '/',
          requestTypes: ['navigate'],
        },
      ],
      navigationPreload: true,
    },
  });

  writeFileSync(target, content, 'utf8');

  return `module.exports = function(opts) {
    const path = '${fileName}';
    return navigator.serviceWorker.register(path, opts);
  };`;
};
